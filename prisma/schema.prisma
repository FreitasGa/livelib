// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum State {
  Main
  Suggestion
  Prompt
  Search
  Rent
  Confirmation
  ConfirmationDenied
  Cart
}

model Client {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String    @unique
  state     State     @default(Main)
  rents     Rent[]
  messages  Message[]
  cart      Cart?
  counter   Int       @default(0)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("client")
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId  String   @unique @map("client_id") @db.ObjectId
  client    Client   @relation(fields: [clientId], references: [id])
  bookIds   String[] @map("book_ids") @db.ObjectId
  books     Book[]   @relation(fields: [bookIds], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cart")
}

model Book {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  author      String
  description String
  price       Int
  stock       Int
  cover       String
  genreIds    String[] @map("genre_ids") @db.ObjectId
  genres      Genre[]  @relation(fields: [genreIds], references: [id])
  rentIds     String[] @map("rent_ids") @db.ObjectId
  rents       Rent[]   @relation(fields: [rentIds], references: [id])
  cartIds     String[] @map("cart_ids") @db.ObjectId
  carts       Cart[]   @relation(fields: [cartIds], references: [id])
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("book")
}

model Genre {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  bookIds   String[] @map("book_ids") @db.ObjectId
  books     Book[]   @relation(fields: [bookIds], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("genre")
}

model Rent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  price     Int
  clientId  String   @map("client_id") @db.ObjectId
  client    Client   @relation(fields: [clientId], references: [id])
  bookIds   String[] @map("book_ids") @db.ObjectId
  books     Book[]   @relation(fields: [bookIds], references: [id])
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("rent")
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  clientId  String   @map("client_id") @db.ObjectId
  client    Client   @relation(fields: [clientId], references: [id])
  body      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("message")
}
